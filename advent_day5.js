var a = [3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 101, 14, 135, 224, 101, -69, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 224, 223, 223, 102, 90, 169, 224, 1001, 224, -4590, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 1102, 90, 45, 224, 1001, 224, -4050, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1001, 144, 32, 224, 101, -72, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1102, 36, 93, 225, 1101, 88, 52, 225, 1002, 102, 38, 224, 101, -3534, 224, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1102, 15, 57, 225, 1102, 55, 49, 225, 1102, 11, 33, 225, 1101, 56, 40, 225, 1, 131, 105, 224, 101, -103, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 224, 223, 223, 1102, 51, 39, 225, 1101, 45, 90, 225, 2, 173, 139, 224, 101, -495, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 5, 224, 1, 223, 224, 223, 1101, 68, 86, 224, 1001, 224, -154, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 344, 101, 1, 223, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 359, 1001, 223, 1, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 374, 101, 1, 223, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 389, 101, 1, 223, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 404, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 419, 101, 1, 223, 223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 434, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 449, 101, 1, 223, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 464, 1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 479, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 494, 1001, 223, 1, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 509, 101, 1, 223, 223, 1008, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 539, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 554, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 1001, 223, 1, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 629, 1001, 223, 1, 223, 7, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 644, 101, 1, 223, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 1001, 223, 1, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226]
computer(a)

//Now the main program

// Opcode 5 is jump-if-true: if the first parameter is non-zero,
//  it sets the instruction pointer to the value from the second parameter. Otherwise, it does nothing.

// Opcode 6 is jump-if-false: if the first parameter is zero,
//  it sets the instruction pointer to the value from the second parameter. Otherwise, it does nothing.

// Opcode 7 is less than: if the first parameter is less than the second parameter,
//  it stores 1 in the position given by the third parameter. Otherwise, it stores 0.

// Opcode 8 is equals: if the first parameter is equal to the second parameter,
//  it stores 1 in the position given by the third parameter. Otherwise, it stores 0.

function computer(arr){
	var i = 0
	while(i < arr.length){
		var opcode = arr[i]
		var op = opcode.toString()
		var new_op = op.slice(op.length-2)
		if([99,1,2,3,4,5,6,7,8].indexOf(opcode) == -1){
			var par1 = op[op.length-3] || 0
			var par2 = op[op.length-4] || 0
		} else {
			var par1 = 0
			var par2 = 0
		}
		var par_value1 = parseInt(par1) ? arr[i+1] : arr[arr[i+1]]
		var par_value2 = parseInt(par2) ? arr[i+2] : arr[arr[i+2]]
		// position mode is 0 interpret as position
		if(parseInt(new_op) == 1){
			arr[arr[i+3]] = par_value1 + par_value2
			i+=4;
		}
		else if(parseInt(new_op) == 2){
			arr[arr[i+3]] = par_value1 * par_value2
			i+=4;
		}
		else if(parseInt(new_op) == 3){
			arr[arr[i+1]] = 5
			i+=2;
		}
		else if(parseInt(new_op) == 4){
			console.log(par_value1)
			i+=2;
		}
		else if(parseInt(new_op) == 5){
			if(par_value1)
				i = par_value2
			else
				i+=3;
		}
		else if(parseInt(new_op) == 6){
			if(!par_value1)
				i = par_value2
			else
				i+=3;
		}
		else if(parseInt(new_op) == 7){
			if(par_value1<par_value2)
				arr[arr[i+3]] = 1
			else
				arr[arr[i+3]] = 0
			i+=4;
		}
		else if(parseInt(new_op) == 8){
			if(par_value1==par_value2)
				arr[arr[i+3]] = 1
			else
				arr[arr[i+3]] = 0
			i+=4;
		}
		else if(parseInt(new_op) == 99){
			break;
		}

	}
	// return arr[0]
}